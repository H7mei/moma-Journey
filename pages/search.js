import Header from '../components/Header';
import Footer from '../components/Footer';
import { useRouter } from 'next/router';
import { format } from 'date-fns';
import InfoCard from '../components/InfoCard';
import Map from '../components/Map';
import 'mapbox-gl/dist/mapbox-gl.css';
import React, { useRef, useEffect, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import getCenter from 'geolib/es/getCenter';
import Head from 'next/head';

mapboxgl.accessToken = process.env.mabbox_key;

function Search({ searchResult }) {
  const router = useRouter();
  const { location, startDate, endDate, noOfGuests } = router.query;
  const formattedStartDate = format(new Date(startDate), 'dd MMMM yy');
  const formattedEndDate = format(new Date(endDate), 'dd MMMM yy');
  const range = `${formattedStartDate} - ${formattedEndDate}`;

  const cordinate = searchResult.map(({ long, lat }) => ({
    longitude: long,
    latitude: lat,
  }));

  const center = getCenter(cordinate);

  const mapContainer = useRef(null);
  const map = useRef(null);
  const [lng, setLng] = useState(center.longitude);
  const [lat, setLat] = useState(center.latitude);
  const [zoom, setZoom] = useState(9);

  useEffect(() => {
    if (map.current) return; // initialize map only once
    map.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: 'mapbox://styles/hanafichoi/ckzqpkxw5004h15oa3jhd5n1q',
      center: [lng, lat],
      zoom: zoom,
    });
  });

  useEffect(() => {
    if (!map.current) return; // wait for map to initialize
    map.current.on('move', () => {
      setLng(map.current.getCenter().lng.toFixed(4));
      setLat(map.current.getCenter().lat.toFixed(4));
      setZoom(map.current.getZoom().toFixed(2));
    });
  });

  return (
    <div>
      <Head>
        <title>Search {location}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header
        placeholder={`${location} | ${range} | ${noOfGuests} guests`}
        cls='fixed'
      />
      <main className='flex'>
        <section className='flex-grow pt-28 px-6'>
          <p className='text-xs'>
            300+ Stays • {range} • for {noOfGuests} guests
          </p>
          <h1 className='text-3xl font-semibold mt-2 mb-6'>
            Stays in {location}
          </h1>
          <div className='lg:inline-flex hidden mb-5 space-x-3 text-gray-800 whitespace-nowrap'>
            <p className='button'>Cancellatin Flexibility</p>
            <p className='button'>Type of Place</p>
            <p className='button'>Price</p>
            <p className='button'>Rooms and Beds</p>
            <p className='button'>More filters</p>
          </div>

          <div className='flex flex-col'>
            {searchResult.map(
              ({ img, location, title, description, star, price, total }) => (
                <InfoCard
                  key={img}
                  img={img}
                  location={location}
                  title={title}
                  description={description}
                  star={star}
                  price={price}
                  total={total}
                />
              ),
            )}
          </div>
        </section>

        <section className='hidden xl:inline-flex xl:min-w-[600px]'>
          <div ref={mapContainer} className='relative h-full w-full' />
        </section>
      </main>
      <Footer />
    </div>
  );
}

export default Search;

export async function getServerSideProps() {
  const searchResult = await fetch('https://jsonkeeper.com/b/Q9N7').then(
    (res) => res.json(),
  );

  return {
    props: {
      searchResult,
    },
  };
}
